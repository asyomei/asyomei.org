---
import type { HTMLAttributes } from 'astro/types'
import type { Paths } from 'type-fest'
import { url } from '~/url'

type Replace<K extends string> = K extends `${infer A}.${infer B}` ? `${A}/${Replace<B>}` : K
type Keys = keyof {
  [K in Paths<typeof url, { leavesOnly: true }> as `//${Replace<K>}`]: never
}

interface Props extends HTMLAttributes<'a'> {
  href: (string & Record<never, never>) | Keys
}

const { props } = Astro

if (props.href) {
  if (props.href.startsWith('//')) {
    const keys = props.href.slice(2).split('/')
    props.href = keys.reduce((obj, key) => obj[key], url as any)
  }

  if (!('target' in props) && !props.href.startsWith('/')) {
    props.target = '_blank'
  }
}
---

<a {...props}><slot /></a>
